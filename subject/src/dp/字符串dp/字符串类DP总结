1. 解决两个字符串的动态规划问题，一般都是用两个指针 i,j 分别指向两个字符串的最后，根据题目的要求然后一步步往前走，缩小问题的规模

2. 既然是用i j指针指向两数组（即表示ij已遍历过的字符串，亦即状态），按照题目要求（状态转移条件）一步一步缩小规模，那明显就可以确定
    状态和转移条件，自然而然状态转移条件也出来了。 状态即dp[i][j]——两字符串分别在位置i和位置j所对应子字符串问题的最优解
    但是一般而言，这种定义dp[i][j]的方式会面临处理边界情况的问题，所以不防将dp[i][j]定义成两字符串在分别在位置i-1、j-1字符处
    的最优解，这种定义方式边界情况就好处理一点了

3. 边界情况一定要分不同场景来判断，有些时候，dp[0][i]或者dp[0][j]的边界情况就是0，则不用处理——比如最长公共子序列
    而有些情况，p[0][i]或者dp[0][j]不全是0，则需要处理——比如编辑距离

3. 单字符串问题，一般可以通过画矩阵方式，然后两指针指向不同的index来发现dp规律来解决

