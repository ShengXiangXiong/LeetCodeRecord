单调队列：
    视具体题目而定，单调队列有单调递增和单调递减两种，一般来讲，队列的队首是整个队列的最大值或最小值
    单调队列可以解决许多问题，而且可以用来优化DP，下面简单的介绍一下单调队列的实现
    具体步骤：
    　  若队列为空，将A[i]从队尾入队
        若队列不为空，将比A[i]大的元素都从队尾弹出，然后把A[i]入队
        若队列不为空且A[i]大于队尾，则直接从队尾把A[i]入队

    单调队列有许多作用：
        比如可以求出一个数组内第一个大于等于一个数x的数
        也可以通过维护单调性，解决一些区间内最小或最大的问题，还比如滑动窗口最大值问题

单调栈：
    其实我们用单调栈做题时都有一种从当前位置像两边扩展寻找大于或小于当前值的感觉。

    单调递增栈
        for(int i = 0; i < T.size(); i++){
          while(! stk.empty() && stk.top() > T[i]){
            ​stk.pop();
          }
          stk.push(A[i]);
        }

    单调递减栈
        for(int i = T.size() - 1; i >= 0; i--){
          while(! stk.empty() && T[i] >= stk.top()){
            stk.pop();
          }
          stk.push(i);
        }

    单调栈作用：
        可以以 O(1) 的时间复杂度得知某个位置左右两侧第一个比他大（或小）的数的位置，当你需要高效率获取某个位置左右两侧比他大（或小）
        的数的位置的的时候就可以用到单调栈。如下
            求解数组中元素右边第一个比它小的元素的下标，从前往后，构造单调递增栈；
            求解数组中元素右边第一个比它大的元素的下标，从前往后，构造单调递减栈；
            求解数组中元素左边第一个比它小的元素的下标，从后往前，构造单调递减栈；
            求解数组中元素左边第一个比它小的元素的下标，从后往前，构造单调递增栈。

        而上面的这种性质可以解决很多问题，比如雨水收集、最大矩形等